<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.13.1@086b94371304750d1c673315321a55d15fc59015">
  <file src="src/Command/DeprecatedStorageFactoryConfigurationCheckCommand.php">
    <MixedArgument>
      <code>$cacheConfiguration</code>
      <code>$configuration</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$cache</code>
      <code>$cacheConfiguration</code>
      <code>$caches</code>
      <code>$caches</code>
      <code>$configuration</code>
    </MixedAssignment>
    <MixedPropertyTypeCoercion>
      <code>$projectConfiguration</code>
    </MixedPropertyTypeCoercion>
  </file>
  <file src="src/Exception/BadMethodCallException.php">
    <UnusedClass>
      <code>BadMethodCallException</code>
    </UnusedClass>
  </file>
  <file src="src/Exception/MissingDependencyException.php">
    <UnusedClass>
      <code>MissingDependencyException</code>
    </UnusedClass>
  </file>
  <file src="src/Exception/OutOfSpaceException.php">
    <UnusedClass>
      <code>OutOfSpaceException</code>
    </UnusedClass>
  </file>
  <file src="src/Exception/UnexpectedValueException.php">
    <UnusedClass>
      <code>UnexpectedValueException</code>
    </UnusedClass>
  </file>
  <file src="src/Exception/UnsupportedMethodCallException.php">
    <UnusedClass>
      <code>UnsupportedMethodCallException</code>
    </UnusedClass>
  </file>
  <file src="src/Module.php">
    <UnusedClass>
      <code>Module</code>
    </UnusedClass>
  </file>
  <file src="src/Pattern/AbstractPattern.php">
    <InvalidNullableReturnType>
      <code>PatternOptions</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->options]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/Pattern/CallbackCache.php">
    <InvalidArgument>
      <code>$function</code>
    </InvalidArgument>
    <MixedArgument>
      <code>$result</code>
      <code><![CDATA[$result[1] ?? '']]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$result[0]</code>
      <code>$result[1]</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$object</code>
      <code>$result</code>
      <code>$ret</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>__call</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Pattern/CaptureCache.php">
    <DocblockTypeContradiction>
      <code>$perm !== false</code>
    </DocblockTypeContradiction>
    <MissingClosureParamType>
      <code>$content</code>
    </MissingClosureParamType>
    <MissingReturnType>
      <code>clearByGlob</code>
      <code>set</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$content</code>
      <code>$perm</code>
      <code>$perm</code>
    </MixedArgument>
    <PossiblyInvalidMethodCall>
      <code>isFile</code>
    </PossiblyInvalidMethodCall>
    <PossiblyNullOperand>
      <code>$publicDir</code>
    </PossiblyNullOperand>
    <PossiblyUnusedMethod>
      <code>clearByGlob</code>
      <code>start</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code>bool</code>
      <code>bool</code>
      <code>string|null</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Pattern/ObjectCache.php">
    <ImplementedParamTypeMismatch>
      <code>$method</code>
      <code>$method</code>
    </ImplementedParamTypeMismatch>
    <InvalidArrayAccess>
      <code>$callback[1]</code>
    </InvalidArrayAccess>
    <InvalidReturnStatement>
      <code><![CDATA[$this->call('__set', [$name, $value])]]></code>
      <code><![CDATA[$this->call('__unset', [$name])]]></code>
    </InvalidReturnStatement>
    <MixedArgument>
      <code>$callback[1]</code>
      <code>$property</code>
      <code>$property</code>
      <code>$property</code>
      <code>$property</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$property</code>
      <code>$property</code>
      <code>$property</code>
      <code>$property</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>bool</code>
      <code>void</code>
      <code>void</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>$method</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->call('__isset', [$name])]]></code>
    </MixedReturnStatement>
    <ParamNameMismatch>
      <code>$method</code>
      <code>$method</code>
    </ParamNameMismatch>
    <PossiblyNullArgument>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
    </PossiblyNullArgument>
    <PossiblyUnusedMethod>
      <code>__get</code>
      <code>__set</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Pattern/OutputCache.php">
    <MixedArgument>
      <code>$data</code>
      <code>$key</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$data</code>
      <code>$key</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>end</code>
      <code>start</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(string) $key</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Pattern/PatternOptions.php">
    <MixedArgument>
      <code>$array</code>
    </MixedArgument>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$dirPermission</code>
      <code>$filePermission</code>
      <code>$umask</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PossiblyUnusedMethod>
      <code>setCacheByDefault</code>
      <code>setDirPermission</code>
      <code>setFileLocking</code>
      <code>setFilePermission</code>
      <code>setObject</code>
      <code>setObjectCacheMagicProperties</code>
      <code>setObjectCacheMethods</code>
      <code>setObjectNonCacheMethods</code>
      <code>setPublicDir</code>
      <code>setUmask</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(bool) $cacheOutput</code>
      <code>(bool) $fileLocking</code>
      <code>(bool) $objectCacheMagicProperties</code>
      <code>(string) $indexFilename</code>
      <code>(string) $objectKey</code>
      <code>(string) $publicDir</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Psr/CacheItemPool/CacheItemPoolDecorator.php">
    <DocblockTypeContradiction>
      <code>is_array($result)</code>
    </DocblockTypeContradiction>
    <MissingReturnType>
      <code>validateKey</code>
      <code>validateKeys</code>
      <code>validateStorage</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$cleared</code>
      <code>$key</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <UndefinedInterfaceMethod>
      <code>flush</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Psr/SimpleCache/SimpleCacheDecorator.php">
    <DocblockTypeContradiction>
      <code>null === $ttl</code>
    </DocblockTypeContradiction>
    <MixedArgument>
      <code>$key</code>
      <code>$key</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$key</code>
      <code>$key</code>
      <code>$result</code>
      <code>$result</code>
      <code>$results[$key]</code>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyNullArgument>
      <code>$ttl</code>
      <code>$ttl</code>
    </PossiblyNullArgument>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[null !== $this->storage->removeItem($key)]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Service/StorageAdapterFactory.php">
    <InvalidArgument>
      <code>$pluginConfiguration</code>
    </InvalidArgument>
    <InvalidArrayOffset>
      <code><![CDATA[$pluginConfiguration['priority']]]></code>
    </InvalidArrayOffset>
  </file>
  <file src="src/Service/StorageAdapterFactoryFactory.php">
    <MixedArgument>
      <code><![CDATA[$container->get(AdapterPluginManager::class)]]></code>
      <code><![CDATA[$container->get(StoragePluginFactoryInterface::class)]]></code>
    </MixedArgument>
    <PossiblyUnusedReturnValue>
      <code>StorageAdapterFactory</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Service/StorageCacheAbstractServiceFactory.php">
    <PossiblyUnusedReturnValue>
      <code>object</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Service/StorageCacheFactory.php">
    <PossiblyUnusedReturnValue>
      <code>StorageInterface</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Service/StoragePluginFactoryFactory.php">
    <MixedArgument>
      <code><![CDATA[$container->get(PluginManager::class)]]></code>
    </MixedArgument>
    <PossiblyUnusedReturnValue>
      <code>StoragePluginFactory</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Storage/Adapter/AbstractAdapter.php">
    <ArgumentTypeCoercion>
      <code>$plugin</code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[$args['success']]]></code>
      <code><![CDATA[$args['success']]]></code>
      <code><![CDATA['casToken']]></code>
      <code><![CDATA['casToken']]></code>
      <code><![CDATA['success']]></code>
      <code><![CDATA['success']]></code>
      <code><![CDATA['success']]></code>
      <code><![CDATA['success']]></code>
    </InvalidArgument>
    <InvalidNullableReturnType>
      <code>bool</code>
    </InvalidNullableReturnType>
    <MixedArgument>
      <code><![CDATA[$args['key']]]></code>
      <code><![CDATA[$args['key']]]></code>
      <code><![CDATA[$args['key']]]></code>
      <code><![CDATA[$args['key']]]></code>
      <code>$handle</code>
      <code>$keyValuePairs</code>
      <code>$keyValuePairs</code>
      <code>$keyValuePairs</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$key</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$handle</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKey</code>
      <code>$normalizedKeyValuePairs[$key]</code>
      <code>$oldValue</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result[$normalizedKey]</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>AdapterOptions</code>
      <code>Capabilities</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array|bool</code>
      <code>bool</code>
      <code>bool</code>
      <code>bool</code>
      <code>bool</code>
      <code>bool</code>
      <code>bool</code>
      <code>bool</code>
      <code>int|bool</code>
      <code>int|bool</code>
      <code>int|bool</code>
      <code>int|bool</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>setAdapter</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code>$newValue</code>
      <code>$newValue</code>
      <code><![CDATA[$this->options]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $keys, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $keys, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerException(__FUNCTION__, $args, $result, $e)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
      <code><![CDATA[$this->triggerPost(__FUNCTION__, $args, $result)]]></code>
    </MixedReturnStatement>
    <NullableReturnStatement>
      <code>$success</code>
    </NullableReturnStatement>
    <PossiblyInvalidArgument>
      <code><![CDATA[$args['key']]]></code>
      <code><![CDATA[$args['key']]]></code>
      <code><![CDATA[$args['value']]]></code>
      <code><![CDATA[$args['value']]]></code>
    </PossiblyInvalidArgument>
    <PossiblyUnusedMethod>
      <code>getCaching</code>
      <code>setCaching</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$pluginRegistry</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
      <code>(int) $value</code>
      <code>(int) $value</code>
      <code>(string) $key</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Storage/Adapter/AdapterOptions.php">
    <DocblockTypeContradiction>
      <code>is_array($options)</code>
    </DocblockTypeContradiction>
    <MissingClosureParamType>
      <code>$letters</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code>$key</code>
      <code>$letter</code>
      <code>$letters</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$array[$normalizedKey]</code>
      <code>$key</code>
      <code>$letter</code>
      <code>$value</code>
    </MixedAssignment>
    <RawObjectIteration>
      <code>$this</code>
    </RawObjectIteration>
    <RedundantCastGivenDocblockType>
      <code>(bool) $readable</code>
      <code>(bool) $writable</code>
      <code>(string) $keyPattern</code>
      <code>(string) $namespace</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Storage/Adapter/KeyListIterator.php">
    <RedundantCastGivenDocblockType>
      <code>(int) $mode</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Storage/AdapterPluginManager.php">
    <NonInvariantDocblockPropertyType>
      <code>$instanceOf</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="src/Storage/AvailableSpaceCapableInterface.php">
    <UnusedClass>
      <code>AvailableSpaceCapableInterface</code>
    </UnusedClass>
  </file>
  <file src="src/Storage/Capabilities.php">
    <DocblockTypeContradiction>
      <code>is_string($name)</code>
    </DocblockTypeContradiction>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$toType</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
      <code>array</code>
      <code>bool</code>
      <code>bool</code>
      <code>bool</code>
      <code>float</code>
      <code>int</code>
      <code>int</code>
      <code>int</code>
      <code>int</code>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->getCapability('lockOnExpire', 0)]]></code>
      <code><![CDATA[$this->getCapability('maxKeyLength', self::UNKNOWN_KEY_LENGTH)]]></code>
      <code><![CDATA[$this->getCapability('maxTtl', 0)]]></code>
      <code><![CDATA[$this->getCapability('minTtl', 0)]]></code>
      <code><![CDATA[$this->getCapability('namespaceIsPrefix', true)]]></code>
      <code><![CDATA[$this->getCapability('namespaceSeparator', '')]]></code>
      <code><![CDATA[$this->getCapability('staticTtl', false)]]></code>
      <code><![CDATA[$this->getCapability('supportedDatatypes', [
            'NULL'     => false,
            'boolean'  => false,
            'integer'  => false,
            'double'   => false,
            'string'   => true,
            'array'    => false,
            'object'   => false,
            'resource' => false,
        ])]]></code>
      <code><![CDATA[$this->getCapability('supportedMetadata', [])]]></code>
      <code><![CDATA[$this->getCapability('ttlPrecision', 1)]]></code>
      <code><![CDATA[$this->getCapability('useRequestTime', false)]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedMethod>
      <code>getNamespaceIsPrefix</code>
      <code>getNamespaceSeparator</code>
      <code>getSupportedMetadata</code>
      <code>getTtlPrecision</code>
      <code>setLockOnExpire</code>
      <code>setMaxKeyLength</code>
      <code>setMinTtl</code>
      <code>setNamespaceIsPrefix</code>
      <code>setNamespaceSeparator</code>
      <code>setStaticTtl</code>
      <code>setSupportedDatatypes</code>
      <code>setSupportedMetadata</code>
      <code>setTtlPrecision</code>
      <code>setUseRequestTime</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$lockOnExpire</code>
      <code>$maxKeyLength</code>
      <code>$maxTtl</code>
      <code>$minTtl</code>
      <code>$namespaceIsPrefix</code>
      <code>$namespaceSeparator</code>
      <code>$staticTtl</code>
      <code>$supportedDatatypes</code>
      <code>$supportedMetadata</code>
      <code>$ttlPrecision</code>
      <code>$useRequestTime</code>
    </PossiblyUnusedProperty>
    <PossiblyUnusedReturnValue>
      <code>Capabilities</code>
    </PossiblyUnusedReturnValue>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
      <code>(float) $ttlPrecision</code>
      <code>(int) $maxKeyLength</code>
      <code>(int) $maxTtl</code>
      <code>(int) $minTtl</code>
      <code>(int) $timeout</code>
      <code>(string) $separator</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Storage/ClearByPrefixInterface.php">
    <UnusedClass>
      <code>ClearByPrefixInterface</code>
    </UnusedClass>
  </file>
  <file src="src/Storage/ClearExpiredInterface.php">
    <PossiblyUnusedReturnValue>
      <code>bool</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Storage/Event.php">
    <ImplementedReturnTypeMismatch>
      <code>Event</code>
    </ImplementedReturnTypeMismatch>
    <MoreSpecificImplementedParamType>
      <code>$target</code>
      <code>$target</code>
    </MoreSpecificImplementedParamType>
    <PossiblyUnusedReturnValue>
      <code>Event</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Storage/ExceptionEvent.php">
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Storage/IterableInterface.php">
    <UnusedClass>
      <code>IterableInterface</code>
    </UnusedClass>
  </file>
  <file src="src/Storage/IteratorInterface.php">
    <PossiblyUnusedMethod>
      <code>getMode</code>
      <code>getStorage</code>
      <code>setMode</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Storage/OptimizableInterface.php">
    <PossiblyUnusedReturnValue>
      <code>bool</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Storage/Plugin/AbstractPlugin.php">
    <DocblockTypeContradiction>
      <code><![CDATA[null === $this->options]]></code>
    </DocblockTypeContradiction>
    <MissingConstructor>
      <code>$options</code>
      <code>$options</code>
      <code>$options</code>
      <code>$options</code>
      <code>$options</code>
    </MissingConstructor>
  </file>
  <file src="src/Storage/Plugin/PluginInterface.php">
    <PossiblyUnusedReturnValue>
      <code>PluginInterface</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Storage/Plugin/PluginOptions.php">
    <InvalidReturnStatement>
      <code><![CDATA[$this->serializer]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>SerializerAdapter</code>
    </InvalidReturnType>
    <MixedAssignment>
      <code><![CDATA[$this->serializerOptions]]></code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>setExitOnAbort</code>
      <code>setOptimizingFactor</code>
      <code>setSerializerOptions</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$serializer</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(bool) $exitOnAbort</code>
      <code>(bool) $throwExceptions</code>
      <code>(int) $factor</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Storage/Plugin/Serializer.php">
    <MixedArgument>
      <code>$baseCapabilities</code>
      <code>$baseCapabilities</code>
      <code><![CDATA[$baseCapabilities->getAdapter()]]></code>
      <code><![CDATA[$params['key']]]></code>
      <code><![CDATA[$params['key']]]></code>
      <code><![CDATA[$params['key']]]></code>
      <code><![CDATA[$params['key']]]></code>
      <code><![CDATA[$params['keyValuePairs']]]></code>
      <code><![CDATA[$params['keyValuePairs']]]></code>
      <code>$result</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArrayOffset>
      <code>$keyValuePairs[$failedKey]</code>
      <code>$keyValuePairs[$failedKey]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$baseCapabilities</code>
      <code>$failedKey</code>
      <code>$failedKey</code>
      <code>$key</code>
      <code>$key</code>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$newValue</code>
      <code>$newValue</code>
      <code>$oldValue</code>
      <code>$oldValue</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getAdapter</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$keyValuePairs[$key]</code>
      <code>$keyValuePairs[$key]</code>
      <code>$oldValue</code>
      <code>$oldValue</code>
      <code><![CDATA[$params['value']]]></code>
    </MixedOperand>
    <PossiblyNullOperand>
      <code>$oldValue</code>
      <code>$oldValue</code>
    </PossiblyNullOperand>
  </file>
  <file src="src/Storage/PluginManager.php">
    <MixedReturnStatement>
      <code>$plugin</code>
    </MixedReturnStatement>
    <NonInvariantDocblockPropertyType>
      <code>$aliases</code>
      <code>$factories</code>
      <code>$instanceOf</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="src/Storage/PostEvent.php">
    <PossiblyUnusedParam>
      <code>$value</code>
    </PossiblyUnusedParam>
  </file>
  <file src="src/Storage/StorageInterface.php">
    <PossiblyUnusedMethod>
      <code>addItem</code>
      <code>decrementItem</code>
      <code>incrementItem</code>
      <code>replaceItem</code>
      <code>touchItem</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code>StorageInterface</code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Storage/TaggableInterface.php">
    <UnusedClass>
      <code>TaggableInterface</code>
    </UnusedClass>
  </file>
  <file src="src/Storage/TotalSpaceCapableInterface.php">
    <UnusedClass>
      <code>TotalSpaceCapableInterface</code>
    </UnusedClass>
  </file>
  <file src="test/Command/DeprecatedStorageFactoryConfigurationCheckCommandTest.php">
    <DeprecatedMethod>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
    </DeprecatedMethod>
  </file>
  <file src="test/Pattern/AbstractCommonPatternTest.php">
    <PossiblyUnusedMethod>
      <code>getCommonPatternNamesProvider</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Pattern/AbstractCommonStoragePatternTest.php">
    <NonInvariantDocblockPropertyType>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
      <code>$pattern</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="test/Pattern/CallbackCacheTest.php">
    <MissingClosureParamType>
      <code>$event</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code>$key</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$params['key']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$generatedKey</code>
      <code>$key</code>
      <code>$params</code>
      <code>$return</code>
      <code>$return</code>
      <code>$usedKey</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>attach</code>
      <code>getParams</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>getCommonPatternNamesProvider</code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code>call</code>
      <code>call</code>
      <code>call</code>
      <code>call</code>
      <code>call</code>
      <code>call</code>
      <code>generateKey</code>
      <code>generateKey</code>
      <code>getEventManager</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Pattern/CaptureCacheTest.php">
    <PossiblyNullArrayAccess>
      <code><![CDATA[$err['message']]]></code>
      <code><![CDATA[$err['message']]]></code>
      <code><![CDATA[$err['message']]]></code>
    </PossiblyNullArrayAccess>
    <PossiblyUnusedMethod>
      <code>getCommonPatternNamesProvider</code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code>set</code>
      <code>set</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Pattern/ObjectCacheTest.php">
    <MissingClosureParamType>
      <code>$event</code>
    </MissingClosureParamType>
    <MixedArrayAccess>
      <code><![CDATA[$params['key']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$generatedKey</code>
      <code>$params</code>
      <code>$return</code>
      <code>$return</code>
      <code>$usedKey</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>attach</code>
      <code>getParams</code>
    </MixedMethodCall>
    <NoInterfaceProperties>
      <code><![CDATA[$this->pattern->property]]></code>
      <code><![CDATA[$this->pattern->property]]></code>
      <code><![CDATA[$this->pattern->property]]></code>
      <code><![CDATA[$this->pattern->property]]></code>
      <code><![CDATA[$this->pattern->property]]></code>
      <code><![CDATA[$this->pattern->unknownProperty]]></code>
    </NoInterfaceProperties>
    <PossiblyNullPropertyFetch>
      <code><![CDATA[$this->options->getObject()->property]]></code>
      <code><![CDATA[$this->options->getObject()->property]]></code>
    </PossiblyNullPropertyFetch>
    <PossiblyUnusedMethod>
      <code>getCommonPatternNamesProvider</code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code>call</code>
      <code>generateKey</code>
      <code>getEventManager</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Pattern/OutputCacheTest.php">
    <PossiblyNullReference>
      <code>getItem</code>
      <code>setItem</code>
    </PossiblyNullReference>
    <PossiblyUnusedMethod>
      <code>getCommonPatternNamesProvider</code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code>end</code>
      <code>start</code>
      <code>start</code>
      <code>start</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Pattern/TestAsset/TestCachePattern.php">
    <UnusedClass>
      <code>TestCachePattern</code>
    </UnusedClass>
  </file>
  <file src="test/Pattern/TestAsset/TestCallbackCache.php">
    <MissingReturnType>
      <code>emptyMethod</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>emptyMethod</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/Pattern/TestAsset/TestObjectCache.php">
    <PossiblyUnusedMethod>
      <code>emptyMethod</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$property</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="test/Psr/CacheItemPool/CacheItemPoolDecoratorTest.php">
    <DeprecatedMethod>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$keys</code>
      <code>$keys</code>
    </InvalidArgument>
    <MissingReturnType>
      <code>testDeleteItemInvalidKeyThrowsException</code>
      <code>testGetItemInvalidKeyThrowsException</code>
      <code>testHasItemInvalidKeyThrowsException</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$item</code>
      <code>$key</code>
      <code>$key</code>
      <code>$key</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$item</code>
      <code>$item</code>
      <code>$item</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>get</code>
      <code>get</code>
      <code>get</code>
      <code>get</code>
      <code>get</code>
      <code>getKey</code>
      <code>isHit</code>
      <code>isHit</code>
      <code>isHit</code>
      <code>isHit</code>
      <code>isHit</code>
      <code>isHit</code>
      <code>isHit</code>
      <code>set</code>
    </MixedMethodCall>
  </file>
  <file src="test/Psr/CacheItemPool/CacheItemTest.php">
    <InvalidArgument>
      <code><![CDATA['foo']]></code>
      <code>[]</code>
    </InvalidArgument>
  </file>
  <file src="test/Psr/SimpleCache/SimpleCacheDecoratorTest.php">
    <DeprecatedMethod>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
    </DeprecatedMethod>
    <MissingReturnType>
      <code>testHasProxiesToStorage</code>
      <code>testSetMultipleRaisesExceptionWhenTtlValueIsInvalid</code>
      <code>testSetMultipleShouldRaisePsrInvalidArgumentExceptionForInvalidKeys</code>
      <code>testSetMultipleShouldRemoveItemsFromCacheIfTtlIsBelow1</code>
      <code>testSetMultipleShouldRemoveItemsFromCacheIfTtlIsBelow1AndStorageDoesNotSupportPerItemTtl</code>
      <code>testSetRaisesExceptionWhenTtlValueIsInvalid</code>
      <code>testSetShouldAcknowledgeStorageAdapterMaxKeyLengthWithPsrDecorator</code>
      <code>testSetShouldRaisePsrInvalidArgumentExceptionForInvalidKeys</code>
      <code>testSetShouldRemoveItemFromCacheIfTtlIsBelow1</code>
      <code>testSetShouldRemoveItemFromCacheIfTtlIsBelow1AndStorageDoesNotSupportPerItemTtl</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$ttl</code>
      <code>$ttl</code>
    </MixedArgument>
    <MixedInferredReturnType>
      <code>array</code>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/Psr/SimpleCache/TestAsset/TtlStorage.php">
    <MissingReturnType>
      <code>setCapabilities</code>
    </MissingReturnType>
    <PropertyNotSetInConstructor>
      <code>TtlStorage</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/Service/DeprecatedSchemaDetectorTest.php">
    <MixedInferredReturnType>
      <code>Generator</code>
      <code>Generator</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/Service/StorageAdapterFactoryFactoryTest.php">
    <DeprecatedMethod>
      <code>withConsecutive</code>
    </DeprecatedMethod>
  </file>
  <file src="test/Service/StorageAdapterFactoryTest.php">
    <DeprecatedMethod>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
    </DeprecatedMethod>
  </file>
  <file src="test/Service/StorageCacheFactoryTest.php">
    <DeprecatedMethod>
      <code>withConsecutive</code>
      <code>withConsecutive</code>
    </DeprecatedMethod>
  </file>
  <file src="test/StaticAnalysis/AdapterPluginManagerTypes.php">
    <UnusedClass>
      <code>AdapterPluginManagerTypes</code>
    </UnusedClass>
  </file>
  <file src="test/StaticAnalysis/PluginManagerTypes.php">
    <UnusedClass>
      <code>PluginManagerTypes</code>
    </UnusedClass>
  </file>
  <file src="test/Storage/Adapter/AbstractAdapterTest.php">
    <MissingClosureParamType>
      <code>$event</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>static function ($event) use ($retVal) {</code>
    </MissingClosureReturnType>
    <MixedArgument>
      <code>$success</code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code>$eventList[]</code>
      <code>$eventList[]</code>
      <code>$eventList[]</code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$result</code>
      <code>$result</code>
      <code>$rs</code>
      <code>$v</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>getResult</code>
      <code>stopPropagation</code>
    </MixedMethodCall>
    <NullArgument>
      <code>null</code>
    </NullArgument>
    <PossiblyNullReference>
      <code>getNamespace</code>
      <code>setKeyPattern</code>
      <code>setKeyPattern</code>
      <code>setKeyPattern</code>
      <code>setNamespace</code>
      <code>setNamespace</code>
      <code>setReadable</code>
      <code>setTtl</code>
      <code>setTtl</code>
      <code>setWritable</code>
    </PossiblyNullReference>
    <PossiblyUndefinedVariable>
      <code>$success</code>
    </PossiblyUndefinedVariable>
  </file>
  <file src="test/Storage/Adapter/AdapterOptionsTest.php">
    <MixedArgument>
      <code>$calledArgs</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$calledArgs[0]</code>
    </MixedArrayAccess>
    <PossiblyNullReference>
      <code>getKeyPattern</code>
      <code>getTtl</code>
      <code>setAdapter</code>
      <code>setFromArray</code>
      <code>setKeyPattern</code>
      <code>setKeyPattern</code>
      <code>setNamespace</code>
      <code>setReadable</code>
      <code>setTtl</code>
      <code>setTtl</code>
      <code>setWritable</code>
    </PossiblyNullReference>
    <PossiblyUnusedProperty>
      <code>$storage</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="test/Storage/Adapter/TestAsset/AdapterWithStorageAndEventsCapableInterface.php">
    <MissingReturnType>
      <code>addPlugin</code>
    </MissingReturnType>
    <UnusedClass>
      <code>AdapterWithStorageAndEventsCapableInterface</code>
    </UnusedClass>
  </file>
  <file src="test/Storage/AdapterPluginManagerTest.php">
    <MissingReturnType>
      <code>testPluginAliasesResolve</code>
      <code>testShareByDefaultAndSharedByDefault</code>
    </MissingReturnType>
  </file>
  <file src="test/Storage/CapabilitiesTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['ArrayObject']]></code>
    </ArgumentTypeCoercion>
    <MissingClosureParamType>
      <code>$eventArg</code>
    </MissingClosureParamType>
    <MixedAssignment>
      <code>$em</code>
      <code>$event</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>attach</code>
    </MixedMethodCall>
    <UndefinedInterfaceMethod>
      <code>getEventManager</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Storage/Plugin/AbstractCommonPluginTest.php">
    <MissingReturnType>
      <code>getCommonPluginNamesProvider</code>
      <code>testOptionObjectAvailable</code>
      <code>testOptionsGetAndSetDefault</code>
    </MissingReturnType>
  </file>
  <file src="test/Storage/Plugin/ClearExpiredByFactorTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>setMethods</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$cb</code>
      <code>$cb</code>
    </InvalidArgument>
    <InvalidArrayAccess>
      <code>$cb[0]</code>
      <code>$cb[1]</code>
    </InvalidArrayAccess>
    <UndefinedInterfaceMethod>
      <code>clearExpiredByFactor</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Storage/Plugin/ExceptionHandlerTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code>$cb</code>
      <code>$cb</code>
    </InvalidArgument>
    <InvalidArrayAccess>
      <code>$cb[0]</code>
      <code>$cb[1]</code>
    </InvalidArrayAccess>
    <MissingClosureParamType>
      <code>$exception</code>
    </MissingClosureParamType>
    <UndefinedInterfaceMethod>
      <code>onException</code>
      <code>onException</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Storage/Plugin/IgnoreUserAbortTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code>$cb</code>
      <code>$cb</code>
    </InvalidArgument>
    <InvalidArrayAccess>
      <code>$cb[0]</code>
      <code>$cb[1]</code>
    </InvalidArrayAccess>
  </file>
  <file src="test/Storage/Plugin/OptimizeByFactorTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>setMethods</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$cb</code>
      <code>$cb</code>
    </InvalidArgument>
    <InvalidArrayAccess>
      <code>$cb[0]</code>
      <code>$cb[1]</code>
    </InvalidArrayAccess>
    <UndefinedInterfaceMethod>
      <code>optimizeByFactor</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Storage/Plugin/SerializerTest.php">
    <ArgumentTypeCoercion>
      <code>$events</code>
      <code>$events</code>
      <code>$events</code>
      <code><![CDATA[$this->adapter->getEventManager()]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code>$cb</code>
      <code>$cb</code>
    </InvalidArgument>
    <InvalidArrayAccess>
      <code>$cb[0]</code>
      <code>$cb[1]</code>
    </InvalidArrayAccess>
    <MissingClosureParamType>
      <code>$casToken</code>
      <code>$casToken</code>
      <code>$casToken</code>
      <code>$success</code>
      <code>$success</code>
      <code>$success</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code>$values</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$values['key1']]]></code>
      <code><![CDATA[$values['key2']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$values</code>
    </MixedAssignment>
    <UndefinedInterfaceMethod>
      <code>onDecrementItemPre</code>
      <code>onReadItemPost</code>
      <code>onReadItemPost</code>
      <code>onReadItemsPost</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Storage/PluginManagerTest.php">
    <MissingReturnType>
      <code>testShareByDefaultAndSharedByDefault</code>
    </MissingReturnType>
  </file>
  <file src="test/Storage/TestAsset/ClearExpiredMockAdapter.php">
    <InvalidReturnType>
      <code>clearExpired</code>
    </InvalidReturnType>
    <PropertyNotSetInConstructor>
      <code>ClearExpiredMockAdapter</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/Storage/TestAsset/MockAdapter.php">
    <InvalidReturnType>
      <code>internalGetItem</code>
      <code>internalRemoveItem</code>
      <code>internalSetItem</code>
    </InvalidReturnType>
    <PropertyNotSetInConstructor>
      <code>MockAdapter</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/Storage/TestAsset/MockPlugin.php">
    <PossiblyUnusedMethod>
      <code>getEventCallbacks</code>
      <code>onSetItemPost</code>
      <code>onSetItemPre</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$handles</code>
    </PossiblyUnusedProperty>
    <PropertyNotSetInConstructor>
      <code>$options</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code>$options instanceof Plugin\PluginOptions</code>
    </RedundantCondition>
  </file>
  <file src="test/Storage/TestAsset/OptimizableMockAdapter.php">
    <InvalidReturnType>
      <code>optimize</code>
    </InvalidReturnType>
    <PropertyNotSetInConstructor>
      <code>OptimizableMockAdapter</code>
    </PropertyNotSetInConstructor>
  </file>
</files>
